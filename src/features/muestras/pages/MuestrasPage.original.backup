import { useState } from 'react'
import { useNavigate } from 'react-router-dom'
import { useNotification } from '@/shared/components/Notification/NotificationContext'
import { RefreshCw, Filter, Calendar, Plus } from 'lucide-react'
import { Button } from '@/shared/components/molecules/Button'
import { APP_STATES } from '@/shared/states'
import { useMuestras, useMuestrasStats } from '../hooks/useMuestras'
import { Muestra } from '../interfaces/muestras.types'
import { MuestraCard } from '../components/MuestraCard'
import { MuestraStatsComponent } from '../components/MuestraStats'

export const MuestrasSimplePage = () => {
  const { muestras, isLoading, error, refetch } = useMuestras()
  const { stats, isLoading: statsLoading } = useMuestrasStats()
  const [showStats, setShowStats] = useState(false)

  const navigate = useNavigate()
  const { notify } = useNotification()

  const [filtroEstado, setFiltroEstado] = useState('')
  const [soloHoy, setSoloHoy] = useState(false)

  // Filtrado local - con validación mejorada
  const muestrasFiltradas = (muestras || []).filter((muestra: Muestra) => {
    if (filtroEstado && muestra.estado_muestra !== filtroEstado) {
      return false
    }

    if (soloHoy) {
      const hoy = new Date().toISOString().split('T')[0]
      return muestra.solicitud?.f_creacion?.split('T')[0] === hoy
    }

    return true
  })
  // Toggle estadísticas
  const toggleStats = () => setShowStats(!showStats)

  // Handlers
  const handleNuevaMuestra = () => {
    navigate('/solicitudes/nueva')
  }

  const handleEditarMuestra = (muestra: Muestra) => {
    navigate(`/muestras/${muestra.id_muestra}/editar`)
  }

  const handleEliminarMuestra = async (muestra: Muestra) => {
    if (!window.confirm(`¿Eliminar muestra ${muestra.id_muestra}?`)) {
      return
    }

    // try {
    //   await deleteMutation.mutateAsync(muestra.id_muestra)
    //   notify('Solicitud eliminada correctamente', 'success')
    // } catch {
    //   notify('Error al eliminar la solicitud', 'error')
    // }
  }

  const handleImportarMuestra = (muestra: Muestra) => {
    navigate(`/muestras/${muestra.id_muestra}/importar`)
  }

  const limpiarFiltros = () => {
    setFiltroEstado('')
    setSoloHoy(false)
  }

  const tieneFiltros = filtroEstado || soloHoy

  if (isLoading) {
    return (
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <h1 className="text-2xl font-bold text-gray-900">Gestión de Muestras</h1>
          <div className="animate-pulse h-10 w-32 bg-gray-200 rounded"></div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {[...Array(8)].map((_, i) => (
            <div key={i} className="animate-pulse">
              <div className="h-24 bg-gray-200 rounded-lg"></div>
            </div>
          ))}
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Gestión de Muestras</h1>
          <p className="text-gray-600 mt-1">
            {/* TODO - revisar que tiene sentido semántico {tieneFiltros && ` (${muestras?.length - muestrasFiltradas.length} filtradas)`} */}
            {muestrasFiltradas.length} de {muestras?.length || 0} muestras
            {tieneFiltros && ` (${muestras?.length - muestrasFiltradas.length} filtradas)`}
          </p>
        </div>

        <div className="flex items-center gap-3">
          <Button onClick={() => refetch()} variant="primary" disabled={isLoading}>
            <div className="flex items-center gap-2">
              <RefreshCw className={`w-4 h-4 ${isLoading ? 'animate-spin' : ''}`} />
              Actualizar
            </div>
          </Button>
          <Button onClick={handleNuevaMuestra} variant="accent">
            <div className="flex items-center gap-2">
              <Plus className="w-4 h-4" />
              Nueva Muestra
            </div>
          </Button>
        </div>
      </div>

      {/* Estadísticas */}
      <div className="flex justify-end">
        <Button
          onClick={toggleStats}
          // variant=""
          className="flex items-center gap-2"
          disabled={statsLoading}
        >
          <Calendar className="w-4 h-4" />
          {showStats ? 'Ocultar estadísticas' : 'Ver estadísticas'}
        </Button>
      </div>
      {showStats && <MuestraStatsComponent stats={stats || undefined} isLoading={statsLoading} />}

      {/* Filtros Simples */}
      <div className="bg-white p-4 rounded-lg shadow border">
        <div className="flex flex-wrap items-center gap-4">
          <div className="flex items-center gap-2">
            <Filter className="w-4 h-4 text-gray-500" />
            <span className="text-sm font-medium text-gray-700">Filtros:</span>
          </div>

          <select
            value={filtroEstado}
            onChange={e => setFiltroEstado(e.target.value)}
            className="px-3 py-1 border border-gray-300 rounded-md text-sm"
          >
            <option value="">Todos los estados</option>
            <option value={APP_STATES.SOLICITUD.PENDIENTE}>Pendiente</option>
            <option value={APP_STATES.SOLICITUD.EN_PROCESO}>En Progreso</option>
            <option value={APP_STATES.SOLICITUD.COMPLETADA}>Completada</option>
            <option value={APP_STATES.SOLICITUD.CANCELADA}>Cancelada</option>
            <option value={APP_STATES.SOLICITUD.RECHAZADA}>Rechazada</option>
          </select>

          <Button
            onClick={() => setSoloHoy(!soloHoy)}
            className={`flex items-center gap-2 px-3 py-1 text-sm rounded-md ${
              soloHoy
                ? 'bg-green-100 text-green-700 hover:bg-green-200'
                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
            }`}
          >
            <Calendar className="w-4 h-4" />
            Sólo Hoy
          </Button>

          {tieneFiltros && (
            <Button
              onClick={limpiarFiltros}
              className="flex items-center gap-2 px-3 py-1 text-sm bg-red-50 text-red-600 hover:bg-red-100 rounded-md"
            >
              Limpiar Filtros
            </Button>
          )}
        </div>
      </div>

      {/* Lista de muestras */}
      <div className="space-y-4">
        {muestrasFiltradas.length > 0 ? (
          <div className="grid gap-1">
            {muestrasFiltradas.map((muestra: Muestra) => (
              <MuestraCard
                key={muestra.id_muestra}
                muestra={muestra}
                onEdit={handleEditarMuestra}
                onDelete={handleEliminarMuestra}
                onImport={handleImportarMuestra}
              />
            ))}
          </div>
        ) : (
          <div className="text-center py-12">
            <div className="text-gray-500 text-lg mb-4">
              {tieneFiltros
                ? 'No se encontraron muestras con los filtros aplicados'
                : 'No hay muestras disponibles'}
            </div>
          </div>
        )}
      </div>
    </div>
  )
}
